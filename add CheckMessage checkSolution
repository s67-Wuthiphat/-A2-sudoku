class Sudoku {
    int[][] grid;
    boolean[][] isEditable;

    Sudoku() {
        grid = new int[9][9];
        isEditable = new boolean[9][9];
        fillGrid();
        retainCells(percentage);
    }

    void fillGrid() {
        fillDiagonalBoxes();
        fillRemaining(0, 0);
    }

    void fillDiagonalBoxes() {
        for (int i = 0; i < 9; i += 3) {
            fillBox(i, i);
        }
    }

    void fillBox(int row, int col) {
        boolean[] used = new boolean[10]; // ตัวเลข 1-9
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                int num;
                do {
                    num = (int) random(1, 10);
                } while (used[num]);
                used[num] = true;
                grid[row + i][col + j] = num;
            }
        }
    }

    boolean fillRemaining(int row, int col) {
        if (row == 9) return true;
        if (col == 9) return fillRemaining(row + 1, 0);
        if (grid[row][col] != 0) return fillRemaining(row, col + 1);

        
        for (int num = 1; num <= 9; num++) {
            if (isSafe(row, col, num)) {
                grid[row][col] = num;
                if (fillRemaining(row, col + 1)) return true;
                grid[row][col] = 0; 
            }
        }
        return false;
    }

    boolean isSafe(int row, int col, int num) {
       
        for (int x = 0; x < 9; x++) {
            if (grid[row][x] == num || grid[x][col] == num) return false;
        }

        
        int startRow = row - row % 3, startCol = col - col % 3;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (grid[i + startRow][j + startCol] == num) return false;
            }
        }
        return true;
    }

 void retainCells(double percentage) {
        int totalCells = 81;
        int cellsToClear = totalCells - (int)(percentage * totalCells);

        while (cellsToClear > 0) {
            int row = (int) random(0, 9);
            int col = (int) random(0, 9);
            if (grid[row][col] != 0) { 
                grid[row][col] = 0;
                cellsToClear--;
            }
        }
    }
    void displayGrid() {
        textSize(32);
        fill(0);
        textAlign(CENTER, CENTER);
        for (int x = 0; x < 9; x++) {
            for (int y = 0; y < 9; y++) {
                if (grid[x][y] != 0) { 
                    text(grid[x][y], x * 100 + 50, y * 100 + 50);
                }
                if (userInputGrid[row][col] != 0) {
                    fill(0, 0, 255); 
                    text(userInputGrid[row][col], col * 100 + 50, row * 100 + 50);
                    fill(0); 
                }
            }
        }
    }
}

Sudoku sudoku;

int selectedRow = -1; 
int selectedCol = -1; 
ArrayList<PVector> addedNumbers = new ArrayList<PVector>(); 
int[][] userInputGrid = new int[9][9];
double currentDifficulty = 0.6;
boolean gameStarted = false; 
int selectedDifficulty = -1;

void setup() {
  size(1200, 905);
  noLoop();
  selectedDifficulty = 1;
  String checkMessage = "";
}

void draw() {
 background(255);
    
    if (!gameStarted) {
        drawDifficultyButtons(); 
        drawStartButton(); 
    } else {
        fill(150, 210, 220);
        drawGrd();
        sudoku.displayGrid();
        drawSelection();
        drawAddedNumbers(); 
    }
}
void drawGrd() { 
    strokeWeight(5);
    stroke(0);
    rect(0, 0, width - 300, height - 5);
    for (int i = 0; i <= 900; i += 100) {
        if (i == 300 || i == 600) {
            strokeWeight(4);
        } else {
            strokeWeight(1);
        }
        line(i, 0, i, 900);
        line(0, i, 900, i); 
    }
}
void drawSelection() {
    if (selectedRow != -1 && selectedCol != -1) {
        noFill();
        stroke(255, 0, 0);
        strokeWeight(3);
        rect(selectedCol * 100, selectedRow * 100, 100, 100);
    }
}
void drawAddedNumbers() {
    stroke(0, 0, 255);
    strokeWeight(2);
    for (PVector pos : addedNumbers) {
        line(pos.x * 100 + 20, pos.y * 100 + 75, pos.x * 100 + 80, pos.y * 100 + 75);
    }
}
void drawDifficultyButtons() {
    for (int i = 0; i < 3; i++) {
        fill(selectedDifficulty == i ? color(100, 150, 255) : color(200)); // เปลี่ยนสีให้ปุ่มที่ถูกเลือก
        rect(470 + i * 100, height - 100, 80, 50); // ตำแหน่งของปุ่ม
    }
    
    fill(0);
    textSize(20);
    textAlign(CENTER, CENTER);
    text("Hard", 510, height - 75);
    text("Medium", 610, height - 75);
    text("Easy", 710, height - 75);
}

void drawStartButton() {
    fill(200);
    rect(560, height - 160, 100, 50); // ขยับไปทางขวา 5 พิกเซล
    fill(0);
    textSize(20);
    textAlign(CENTER, CENTER);
    text("Start Game", 610, height - 135);
}
void drawCheckButton() {
    fill(200);
    rect(930, 50, 100, 50); 
    fill(0);
    textSize(20);
    textAlign(CENTER, CENTER);
    text("Check", 980, 75); 
}

void drawCheckMessage() {
    fill(0);
    textSize(20);
    textAlign(LEFT, CENTER);
    
    String[] lines = checkMessage.split("\n"); 
    for (int i = 0; i < lines.length; i++) {
        text(lines[i], 930, 150 + i * 25); 
    }
}

void checkSolution() {
    boolean isCorrect = true;
    boolean isComplete = true;

   
    for (int row = 0; row < 9; row++) {
        boolean[] seen = new boolean[10]; 
        for (int col = 0; col < 9; col++) {
            int num = userInputGrid[row][col];
            if (num != 0) {
                if (seen[num]) {
                    isCorrect = false;
                  } else {
                    seen[num] = true; 
                }
            } else {
                isComplete = false; 
            }
        }
    }

    
    for (int col = 0; col < 9; col++) {
        boolean[] seen = new boolean[10]; 
        for (int row = 0; row < 9; row++) {
            int num = userInputGrid[row][col];
            if (num != 0) {
                if (seen[num]) {
                    isCorrect = false; 
                } else {
                    seen[num] = true; 
                }
            } else {
                isComplete = false; 
            }
        }
    }

    
    for (int boxRow = 0; boxRow < 3; boxRow++) {
        for (int boxCol = 0; boxCol < 3; boxCol++) {
            boolean[] seen = new boolean[10]; 
            for (int row = boxRow * 3; row < boxRow * 3 + 3; row++) {
                for (int col = boxCol * 3; col < boxCol * 3 + 3; col++) {
                    int num = userInputGrid[row][col];
                    if (num != 0) {
                        if (seen[num]) {
                            isCorrect = false;
                          } else {
                            seen[num] = true; 
                        }
                    } else {
                        isComplete = false; 
                    }
                }
            }
        }
    }

   
    if (isCorrect && isComplete) {
        checkMessage = "You win!";
    } else {
        checkMessage = "You still haven't solved it\ncorrectly. Please try again.";
    }
}

void mousePressed() {
    // Check for difficulty button clicks
    if (!gameStarted) {
        for (int i = 0; i < 3; i++) {
            if (mouseX >= 470 + i * 100 && mouseX <= 550 + i * 100 && mouseY >= height - 100 && mouseY < height - 50) {
                selectedDifficulty = i; 
                currentDifficulty = (i == 0) ? 0.4 : (i == 1) ? 0.6 : 0.8; 
                redraw(); 
                return; 
            }
        }
    }
    
    // Check for start game button click
    if (!gameStarted && mouseX >= 560 && mouseX <= 660 && mouseY >= height - 160 && mouseY < height - 110) {
        gameStarted = true; 
        resetSudoku(); 
    }

    // Check for check solution button click
    if (gameStarted && mouseX >= 930 && mouseX <= 1030 && mouseY >= 50 && mouseY < 100) {
        checkSolution(); 
        redraw(); // Redraw to show the result message
        return;
    }
    
    // Handle grid cell selection
    if (gameStarted && mouseX >= 0 && mouseX < 900 && mouseY >= 0 && mouseY < 900) {
        selectedCol = mouseX / 100;
        selectedRow = mouseY / 100; 
        redraw(); 
    }
}
void resetSudoku() {
    sudoku = new Sudoku(currentDifficulty);
    addedNumbers.clear();
    userInputGrid = new int[9][9]; // Reset user input grid
    checkMessage = ""; // Reset the check message
    redraw();
}
void keyPressed() {
    if (selectedRow != -1 && selectedCol != -1) {
        if (sudoku.isEditable[selectedRow][selectedCol]) {
            if (key >= '1' && key <= '9') {
                int num = key - '0'; 
                userInputGrid[selectedRow][selectedCol] = num; 
                addedNumbers.add(new PVector(selectedCol, selectedRow)); 
                redraw();
            } else if (keyCode == DELETE) {
                userInputGrid[selectedRow][selectedCol] = 0; 
                addedNumbers.removeIf(p -> p.x == selectedCol && p.y == selectedRow);
                redraw();
            }
        }
    }
}
